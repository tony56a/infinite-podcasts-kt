plugins {
    id("org.jetbrains.kotlin.jvm") version "${kotlinVersion}"
    id("org.jetbrains.kotlin.plugin.allopen") version "${kotlinVersion}"
    id "org.jetbrains.kotlin.kapt" version "${kotlinVersion}"
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("io.micronaut.application") version "4.4.2"
    id("org.flywaydb.flyway") version "10.18.0"
}

version = "0.1"
group = "com.zharguy.infinitepodcast"

repositories {
    mavenCentral()
    maven {
        name = "buf"
        url = uri("https://buf.build/gen/maven")
    }
}

dependencies {
    implementation("build.buf.gen:zharguy_scripts_grpc_kotlin:1.4.1.1.20241010063314.33b9c19d3f2f")
    implementation("build.buf.gen:zharguy_scripts_protocolbuffers_kotlin:28.2.0.1.20241010063314.33b9c19d3f2f")
    implementation("com.bucket4j:bucket4j_jdk17-lettuce:8.14.0")
    implementation("com.bucket4j:bucket4j_jdk17-redis-common:8.14.0")
    implementation("com.fasterxml.jackson.core:jackson-databind:2.17.2")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.17.2")
    implementation("com.google.protobuf:protobuf-java-util:3.25.4")
    implementation("com.zaxxer:HikariCP:5.0.1")
    implementation("io.github.oshai:kotlin-logging-jvm:5.1.4")
    implementation("io.micronaut.grpc:micronaut-grpc-runtime")
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
    implementation("io.micronaut.rabbitmq:micronaut-rabbitmq")
    implementation("io.micronaut.redis:micronaut-redis-lettuce")
    implementation("io.micronaut.serde:micronaut-serde-jackson")
    implementation("io.micronaut.validation:micronaut-validation")
    implementation("io.micronaut:micronaut-discovery-core")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-retry")
    implementation("javax.annotation:javax.annotation-api")
    implementation("net.logstash.logback:logstash-logback-encoder:7.4")
    implementation("org.apache.commons:commons-text:1.12.0")
    implementation("org.flywaydb:flyway-core:10.18.0")
    implementation("org.jetbrains.exposed:exposed-core:${exposedVersion}")
    implementation("org.jetbrains.exposed:exposed-dao:${exposedVersion}")
    implementation("org.jetbrains.exposed:exposed-jdbc:${exposedVersion}")
    implementation("org.jetbrains.exposed:exposed-json:${exposedVersion}")
    implementation("org.jetbrains.exposed:exposed-kotlin-datetime:${exposedVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    implementation("org.mapstruct:mapstruct:1.6.0")
    implementation("org.postgresql:postgresql:42.7.4")

    kapt("org.mapstruct:mapstruct-processor:1.6.0")
    kapt("io.micronaut.serde:micronaut-serde-processor")
    kapt("io.micronaut.validation:micronaut-validation")

    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("org.flywaydb:flyway-database-postgresql")
    runtimeOnly("org.yaml:snakeyaml")

    testImplementation("org.mockito:mockito-core")
    testImplementation("org.jetbrains.kotlin:kotlin-test")
}


application {
    mainClass = "com.zharguy.infinitepodcast.ApplicationKt"
}

java {
    sourceCompatibility = JavaVersion.toVersion("17")
}
kotlin {
    jvmToolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

kapt {
    correctErrorTypes true
}

micronaut {
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.zharguy.infinitepodcast.*")
    }
}

tasks.shadowJar {
    archiveFileName.set("${project.name}-fat.jar")
}


